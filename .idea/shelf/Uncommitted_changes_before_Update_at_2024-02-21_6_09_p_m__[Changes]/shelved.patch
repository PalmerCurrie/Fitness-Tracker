Index: src/main/model/Exercise.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport java.util.ArrayList;\r\n\r\n// Represents an exercise having a name, number of sets, number of reps, and weight (in pounds (lbs))\r\npublic class Exercise {\r\n\r\n    private String name;\r\n    private double sets;\r\n    private int reps;\r\n    private double weight;\r\n\r\n    /* REQUIRES: name has a non-zero length\r\n     * EFFECTS: name of exercise is set to name, sets is set to sets,\r\n     * reps set to reps, weight set to weight\r\n     */\r\n    public Exercise(String name, double sets, int reps, double weight) {\r\n        this.name = name;\r\n        this.sets = sets;\r\n        this.reps = reps;\r\n        this.weight = weight;\r\n    }\r\n\r\n    public String getName() {\r\n        return this.name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public double getSets() {\r\n        return this.sets;\r\n    }\r\n\r\n    public void setSets(double sets) {\r\n        this.sets = sets;\r\n    }\r\n\r\n    public int getReps() {\r\n        return this.reps;\r\n    }\r\n\r\n    public void setReps(int reps) {\r\n        this.reps = reps;\r\n    }\r\n\r\n    public double getWeight() {\r\n        return this.weight;\r\n    }\r\n\r\n    public void setWeight(double weight) {\r\n        this.weight = weight;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/model/Exercise.java b/src/main/model/Exercise.java
--- a/src/main/model/Exercise.java	(revision 1c4e72dc8af6b6f230078a75d7a4d130e89b804d)
+++ b/src/main/model/Exercise.java	(date 1708542252929)
@@ -1,5 +1,8 @@
 package model;
 
+import org.json.JSONArray;
+import org.json.JSONObject;
+
 import java.util.ArrayList;
 
 // Represents an exercise having a name, number of sets, number of reps, and weight (in pounds (lbs))
@@ -53,4 +56,16 @@
         this.weight = weight;
     }
 
+
+    // Modeled from CPSC210/JsonSerializationDemo
+    // EFFECTS: Writes Exercise to Json
+    public JSONObject toJson() {
+        JSONObject jsonObject = new JSONObject();
+        jsonObject.put("name", name);
+        jsonObject.put("sets", sets);
+        jsonObject.put("reps", reps);
+        jsonObject.put("weight", weight);
+        return jsonObject;
+    }
+
 }
Index: src/main/model/FitnessTracker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport model.exceptions.WorkoutNameAlreadyExistsException;\r\n\r\nimport java.util.ArrayList;\r\n\r\n\r\npublic class FitnessTracker {\r\n\r\n    private ArrayList<Workout> workoutList;\r\n\r\n    public FitnessTracker() {\r\n        workoutList = new ArrayList<Workout>();\r\n\r\n    }\r\n\r\n\r\n    public ArrayList<Workout> getWorkoutList() {\r\n        return this.workoutList;\r\n    }\r\n\r\n    public int getListSize() {\r\n        return this.workoutList.size();\r\n    }\r\n\r\n    // REQUIRES: getListSize() > 0 and index < getListSize()\r\n    // MODIFIES: this\r\n    // EFFECTS:  removes exercise at index from exerciseList\r\n    public void removeWorkout(int index) {\r\n        this.workoutList.remove(index);\r\n    }\r\n\r\n    // REQUIRES: Workout name is not already in Workout List\r\n    // MODIFIES: this\r\n    // EFFECTS:  adds workout to workoutList\r\n    public void addWorkout(Workout workout) throws WorkoutNameAlreadyExistsException {\r\n        boolean workoutNameAlreadyExists = false;\r\n        for (int i = 0; i < this.getListSize(); i++) {\r\n            if (workout.getName() == this.workoutList.get(i).getName()) {\r\n                workoutNameAlreadyExists = true;\r\n            }\r\n        }\r\n        if (workoutNameAlreadyExists) {\r\n            throw new WorkoutNameAlreadyExistsException();\r\n        } else {\r\n            this.workoutList.add(workout);\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/model/FitnessTracker.java b/src/main/model/FitnessTracker.java
--- a/src/main/model/FitnessTracker.java	(revision 1c4e72dc8af6b6f230078a75d7a4d130e89b804d)
+++ b/src/main/model/FitnessTracker.java	(date 1708542051470)
@@ -3,6 +3,8 @@
 import model.exceptions.WorkoutNameAlreadyExistsException;
 
 import java.util.ArrayList;
+import org.json.JSONArray;
+import org.json.JSONObject;
 
 
 public class FitnessTracker {
@@ -47,4 +49,28 @@
         }
     }
 
+
+    // Modeled from CPSC210/JsonSerializationDemo
+    // EFFECTS: Writes FitnessTracker to Json
+    public JSONObject toJson() {
+        JSONObject jsonObject = new JSONObject();
+        jsonObject.put("workoutList", workoutListToJson());
+        return jsonObject;
+    }
+
+    // Modeled from CPSC210/JsonSerializationDemo
+    // EFFECTS: returns the workouts in the workoutList as a json array
+    public JSONArray workoutListToJson() {
+        JSONArray jsonArray = new JSONArray();
+
+        for (Workout wk : workoutList) {
+            jsonArray.put(wk.toJson());
+        }
+
+        return jsonArray;
+    }
+
+
+
+
 }
\ No newline at end of file
Index: src/main/persistence/JsonReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/persistence/JsonReader.java b/src/main/persistence/JsonReader.java
new file mode 100644
--- /dev/null	(date 1708544374826)
+++ b/src/main/persistence/JsonReader.java	(date 1708544374826)
@@ -0,0 +1,111 @@
+package persistence;
+
+import model.Exercise;
+import model.FitnessTracker;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.util.stream.Stream;
+
+import model.Workout;
+import model.exceptions.WorkoutNameAlreadyExistsException;
+import org.json.*;
+
+// Modeled from CPSC210/JsonSerializationDemo
+// Represents a file reader that will read json data in file to FitnessTracker
+public class JsonReader {
+    private String sourceFile;
+
+    // EFFECTS: constructs the JsonReader to read data from the sourceFile
+    public JsonReader(String sourceFile) {
+        this.sourceFile = sourceFile;
+
+    }
+
+    // Modeled from CPSC210/JsonSerializationDemo
+    // EFFECTS: reads FitnessTracker from sourceFile and then returns it
+    // throws IOException if an error occurs when reading file
+    public FitnessTracker read() throws IOException, WorkoutNameAlreadyExistsException {
+        String jsonData = readFile(sourceFile);
+        JSONObject jsonObject = new JSONObject(jsonData);
+
+        return parseFitnessTracker(jsonObject);
+    }
+
+
+    // Modeled from CPSC210/JsonSerializationDemo
+    // EFFECTS: reads the source file as a string then returns it
+    private String readFile(String sourceFile) throws IOException {
+        StringBuilder contentBuilder = new StringBuilder();
+
+        try (Stream<String> stream = Files.lines(Paths.get(sourceFile), StandardCharsets.UTF_8)) {
+            stream.forEach(contentBuilder::append);
+        }
+        return contentBuilder.toString();
+
+    }
+
+    // Modeled from CPSC210/JsonSerializationDemo
+    // EFFECTS: parses FitnessTracker from the JSON object and then returns it
+    private FitnessTracker parseFitnessTracker(JSONObject jsonObject) throws WorkoutNameAlreadyExistsException {
+        FitnessTracker ft = new FitnessTracker();
+        addWorkouts(ft, jsonObject);
+        return ft;
+    }
+
+    // Modeled from CPSC210/JsonSerializationDemo
+    // MODIFIES: ft
+    // EFFECTS:  parses workouts from JSON object and adds it to FitnessTracker
+    private void addWorkouts(FitnessTracker ft, JSONObject jsonObject) throws WorkoutNameAlreadyExistsException {
+        JSONArray jsonArray = new JSONArray("workoutList");
+        for (Object json : jsonArray) {
+            JSONObject nextWorkout = (JSONObject) json;
+            addWorkoutToFitnessTracker(ft, nextWorkout);
+        }
+    }
+
+    // MODIFIES: ft
+    // EFFECTS: adds parsed workout from JSON object to FitnessTracker workoutList
+    private void addWorkoutToFitnessTracker(FitnessTracker ft, JSONObject jsonObject)
+            throws WorkoutNameAlreadyExistsException {
+        String name = jsonObject.getString("name");
+        String date = jsonObject.getString("date");
+        String weight = jsonObject.getString("weight");
+        double weightDouble = Double.parseDouble(weight);
+        Workout workout = new Workout(name, date, weightDouble);
+        addExercises(workout, jsonObject);
+
+        ft.addWorkout(workout);
+
+
+    }
+
+    // MODIFIES: wk
+    // EFFECTS:  parses exercises from JSON object and adds it to Workout
+    private void addExercises(Workout wk, JSONObject jsonObject) throws WorkoutNameAlreadyExistsException {
+        JSONArray jsonArray = new JSONArray("exerciseList");
+        for (Object json : jsonArray) {
+            JSONObject nextExercise = (JSONObject) json;
+            addExerciseToWorkout(wk, nextExercise);
+        }
+    }
+
+    // MODIFIES: ft
+    // EFFECTS: adds parsed workout from JSON object to FitnessTracker workoutList
+    private void addExerciseToWorkout(Workout wk, JSONObject jsonObject)
+            throws WorkoutNameAlreadyExistsException {
+        String name = jsonObject.getString("name");
+        String sets = jsonObject.getString("sets");
+        String reps = jsonObject.getString("reps");
+        String weight = jsonObject.getString("weight");
+        double weightDouble = Double.parseDouble(weight);
+        double setsDouble = Double.parseDouble(sets);
+        int repsInt = Integer.parseInt(reps);
+        Exercise exercise = new Exercise(name, setsDouble, repsInt, weightDouble);
+        wk.addExercise(exercise);
+
+
+    }
+}
\ No newline at end of file
Index: Project-Starter.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"CheckStyle-IDEA-Module\" serialisationVersion=\"2\">\r\n    <option name=\"activeLocationsIds\" />\r\n  </component>\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"module-library\" scope=\"TEST\">\r\n      <library name=\"JUnit5.8.1\">\r\n        <CLASSES>\r\n          <root url=\"jar://$MODULE_DIR$/lib/junit-jupiter-5.8.1.jar!/\" />\r\n          <root url=\"jar://$MODULE_DIR$/lib/junit-jupiter-api-5.8.1.jar!/\" />\r\n          <root url=\"jar://$MODULE_DIR$/lib/opentest4j-1.2.0.jar!/\" />\r\n          <root url=\"jar://$MODULE_DIR$/lib/junit-platform-commons-1.8.1.jar!/\" />\r\n          <root url=\"jar://$MODULE_DIR$/lib/apiguardian-api-1.1.2.jar!/\" />\r\n          <root url=\"jar://$MODULE_DIR$/lib/junit-jupiter-params-5.8.1.jar!/\" />\r\n          <root url=\"jar://$MODULE_DIR$/lib/junit-jupiter-engine-5.8.1.jar!/\" />\r\n          <root url=\"jar://$MODULE_DIR$/lib/junit-platform-engine-1.8.1.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project-Starter.iml b/Project-Starter.iml
--- a/Project-Starter.iml	(revision 1c4e72dc8af6b6f230078a75d7a4d130e89b804d)
+++ b/Project-Starter.iml	(date 1708541619748)
@@ -27,5 +27,6 @@
         <SOURCES />
       </library>
     </orderEntry>
+    <orderEntry type="library" name="json-20210307" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: src/main/model/Workout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport java.util.ArrayList;\r\n\r\n\r\n// Represents a workout having a name, data, body weight (in pounds), and a list of Exercises completed\r\npublic class Workout {\r\n\r\n    private String name;                        // workout's name\r\n    private String date;                        // date of the Workout\r\n    private ArrayList<Exercise> exerciseList;   // list of exercises completed during workout\r\n    private double weight;                      // user's current body weight at time of workout\r\n\r\n\r\n    /* REQUIRES: name, date have non-zero length\r\n     * EFFECTS: name of workout is set to name, date of workout is set to date\r\n     */\r\n    public Workout(String name, String date, double weight) {\r\n        this.name = name;\r\n        this.date = date;\r\n        this.weight = weight;\r\n        exerciseList = new ArrayList<Exercise>();\r\n    }\r\n\r\n    public String getName() {\r\n        return this.name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getDate() {\r\n        return this.date;\r\n    }\r\n\r\n    public void setDate(String date) {\r\n        this.date = date;\r\n    }\r\n\r\n    public double getWeight() {\r\n        return this.weight;\r\n    }\r\n\r\n    public void setWeight(double weight) {\r\n        this.weight = weight;\r\n    }\r\n\r\n    public ArrayList<Exercise> getExerciseList() {\r\n        return this.exerciseList;\r\n    }\r\n\r\n    public int getListSize() {\r\n        return this.exerciseList.size();\r\n    }\r\n\r\n    // REQUIRES: getListSize() > 0 and index < getListSize()\r\n    // MODIFIES: this\r\n    // EFFECTS: removes exercise at index from exerciseList\r\n    public void removeExercise(int index) {\r\n        this.exerciseList.remove(index);\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: adds exercise to exerciseList\r\n    public void addExercise(Exercise exercise) {\r\n        this.exerciseList.add(exercise);\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/model/Workout.java b/src/main/model/Workout.java
--- a/src/main/model/Workout.java	(revision 1c4e72dc8af6b6f230078a75d7a4d130e89b804d)
+++ b/src/main/model/Workout.java	(date 1708543753696)
@@ -1,5 +1,8 @@
 package model;
 
+import org.json.JSONArray;
+import org.json.JSONObject;
+
 import java.util.ArrayList;
 
 
@@ -8,8 +11,9 @@
 
     private String name;                        // workout's name
     private String date;                        // date of the Workout
-    private ArrayList<Exercise> exerciseList;   // list of exercises completed during workout
     private double weight;                      // user's current body weight at time of workout
+    private ArrayList<Exercise> exerciseList;   // list of exercises completed during workout
+
 
 
     /* REQUIRES: name, date have non-zero length
@@ -68,4 +72,29 @@
     }
 
 
+
+    // Modeled from CPSC210/JsonSerializationDemo
+    // EFFECTS: Writes Workout to Json
+    public JSONObject toJson() {
+        JSONObject jsonObject = new JSONObject();
+        jsonObject.put("name", name);
+        jsonObject.put("date", date);
+        jsonObject.put("weight", weight);
+        jsonObject.put("exerciseList", exerciseListToJson());
+        return jsonObject;
+    }
+
+    // Modeled from CPSC210/JsonSerializationDemo
+    // EFFECTS: returns the exercises in the exerciseList as a json array
+    public JSONArray exerciseListToJson() {
+        JSONArray jsonArray = new JSONArray();
+
+        for (Exercise ex : exerciseList) {
+            jsonArray.put(ex.toJson());
+        }
+
+        return jsonArray;
+    }
+
+
 }
\ No newline at end of file
